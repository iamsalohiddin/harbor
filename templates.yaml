---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "aExjaUY2QlNQWmlSbjFNZg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbEVXRlBQaWNOT0QveVM1UVVBUXdCVS93OHVNMzlaMjRuMWJZZnVJK01sVzVPMnh5Ci9WODhzM3d3TDFlU1Q1aVZKM3RIUkZPNnl5OGhDSDVxenJVVFhUZnlycnNENjdMUjJicDRJSHFVdUVSVzgzeTcKOWdOTTRJOXV4bk0wZDNYa0wwYldMT01Pb0hGbld5RnRlMnB3UGZrZUpnMWF6dW83aXk0T0hpd293Vkw0OVVGRApkRzgyQzhIUGl2SmJXbEdVOEZkR003d1JuRSs5SXVpZUNjbUNpVjdNR3JMbUFhNW51Z2NQV0ZEOGY0ZjdrVW03CnpIOHlERmVtRjRyYS9iRFpIcG5CVXFhSjJENjd6WHR3RFhaYkp0TWM1M0F0cGhyb3h6UnNBTUpPRU1LL2RROUgKYzIrYjdQY0dlY0xCZ2YzczZMMGVrbkpTTWJDait3M2pKUkExNVFJREFRQUJBb0lCQVFDSk5vRGorTXBPSVQ1MQpCbGdxaElXUUZQZk5QcnNsb00wZkgvYUFEWTB6ZGFOU3U3ejZmMjBrU0xRcXk2Yko1RkY3MVJrUndVNm5BN2xWCksvQloxTGJUMkpmTVhhTjJOdWoremhLbk0rbDNVVDhLVzQ5eVRvR1Jld3N2dWFOL1BlbHFXdXFQWlp5K205UGoKUU44WmpGbk04RUtYUWxxY0M2WUkyaGtVa1JjeU45Y3pJTUtoSGFqVG1ISStXV3J6ZWFwYnFTdmxsWXd3a3Focgp6UkhqSkcxdUkzNkkxYzJ0MlNYYTNWbHp0T3JwTFR1VjdVSy80QUVYZVVZaENSVlZFdjJZT014MEZ1UUpJQ0xDCkdySGgvY0w0dk5TMjlyUGpqZHAvbzUvRndmcHcyTVB1eHRMaDJGMUZlMTZHMDRvbHcvT3ZJeFFSUE5JRlZZOGMKd2lGOXRBSGhBb0dCQU1SWDRMKy9FVFFaSnVLNG1Xdkx5SzZxU0IrbkM2NXJkeXVRK0R4QmFoL1c5UzVKb1lMVQoyQVNPNklXSS9jWVRuYy8yVmxGVWxlNVBuYkxzems2blgxY3VvT3hibDIxc1V6MHRHd2xLdTl2bERIclpkZGptCmw1VnNUaUxYQlNsZ1ZwYlRXQ1pheFl1UXFRdS9FZVBHS1dLM1FxR3dGVmpUelJxVFhHbDVmWkxKQW9HQkFNRlMKZmdRaUdXVTFOaWhZNHBQUVIxS1diZDgxQkVzc09YLzZyRDVYbTJTcFdiSTZZNTFlRVZ4QUNhb0I2cUJEVVFNVApFSVZvQkJLRzA2WW9WR09XUG9URjVCN3E2ZW82dnBJbjlCY2g5THIwNy84Nzk5ekUzL0JFM3AxT3FDYkNHRkZYClR2VEtNTU9uSG9vWlorUzQ4RHgyaCswNW5idFNUTGp2dm1wMFJGdzlBb0dBZERNVi9pVVVCMk5EVWpheUJjdnIKRHdRVC96ZWJnRFIxcU1ENVNKL21NTVhGQVFudW5rRmRQd1ZjczNycHhjcGlRV3VtbGllYlBCaStXZUF3RVBpWgpRajJFVzUyeE5yOC9YQnRQdnVZTjNBdm9vT1FHRE1JYndBRURGVGR3QkpiUmFCM1lNNHJSRXRJZ1dhVlE3eDZkCjY2Qk52T2M3R3dEdWgrWGljVUhIZ1pFQ2dZQThISVJta0p2STVvVFNndURoQ1ZCRUU5WlNJMUFVZDhuaFMzYW4KWStKRHFJemxhRloxSmp6THJIWFUwUWU5a1hEdFBjNVRUUWFISkRsSFh4N3VZRmRNUGFReklPUmZHcWtMRlRWRwp4QjR1eTk2Y1JHOUx6RU85bUF5SWFWN0x2bXFGVUZxU3J4UCtva1pTdHBlaGZRZm1KUTBhN0dGcFQ2dmZqVnh1CkNYMEFHUUtCZ0dtTUdzU1pOSnREQWNaKzNpeHk3dThOdUE2VjVKN1FWWkhJM1V1K3VxQmRObkJLbjJyTnVETWEKb1d4eURSYUl0SGdqQmNmaTNjejYvR3FINnBWZWl4Z3VHaWtoVUk0UjlwMzZubEZENFk0c3hUZjk4YW42QTExaApyT1FhNXN1dTlxa0FzdjJjQUEzQ2hKdVdNSDJDdGgydEtiZmx6MjZCYk15aUprejhha2VVCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lSQUpualViNXNMNmFaMlB1WmtGZWNYdWd3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUI0WERUSTBNRE13T1RFMk5UUXhPRm9YRFRJMQpNRE13T1RFMk5UUXhPRm93R2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBbEVXRlBQaWNOT0QveVM1UVVBUXdCVS93OHVNMzlaMjQKbjFiWWZ1SStNbFc1TzJ4eS9WODhzM3d3TDFlU1Q1aVZKM3RIUkZPNnl5OGhDSDVxenJVVFhUZnlycnNENjdMUgoyYnA0SUhxVXVFUlc4M3k3OWdOTTRJOXV4bk0wZDNYa0wwYldMT01Pb0hGbld5RnRlMnB3UGZrZUpnMWF6dW83Cml5NE9IaXdvd1ZMNDlVRkRkRzgyQzhIUGl2SmJXbEdVOEZkR003d1JuRSs5SXVpZUNjbUNpVjdNR3JMbUFhNW4KdWdjUFdGRDhmNGY3a1VtN3pIOHlERmVtRjRyYS9iRFpIcG5CVXFhSjJENjd6WHR3RFhaYkp0TWM1M0F0cGhybwp4elJzQU1KT0VNSy9kUTlIYzIrYjdQY0dlY0xCZ2YzczZMMGVrbkpTTWJDait3M2pKUkExNVFJREFRQUJvMkV3Clh6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk5vZ1UzRFd3S1haMFE4ekZ5VmZPaGZDbVpQSQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUI1Q0N2SmtzNUZDRkdLaVN1RWVhc0dqaTlUS2dPS3B1aURweDIwCmNod1JXQTA5M0tyajF5SnlNWi94cEpwaHRrTk9sZ0tZazhQbDV5eHpvNjU0dDIwamIvU1V6MCt6bjdqTU44ZWQKRW5IQmlQNld2dEwxRS9kUHdKOVpqQVB5bHBPVzJES05wRk1MMWh3bHc4RzRvME44cnIrRVlOS0g3TTRNcFg1ago0TDZ3cWRDUTMrR0lYc0Y3Q2dyblRYdEtYcjIwZjlEZGxuK2ZKM2Q5ZHc0WmsyeUJmYXdnOElGRWxJdEI2VktSClBQODY1b0dMNnlZMlNObTdtRE9ad2psYlMySis0M2sxSm9pcW9GeG4reDRBeDJaemVxRW5jcUZ4dzRwdk8zVWYKODgwdGRGaWVvTU9JT2ZpbWxOVmU1MkdYaGYxTDFWOUw5U0dDZW5TalhYdENWSEZXCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "c3JjWExwREpJa1cxMlltSEVrZWd1NldDNWVPanlUcjA="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-ingress"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUl4Y0tQZWpZOHZ3MVRxNlNLQ3FiNDh3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEkwTURNd09URTJOVFF4TjFvWERUSTFNRE13T1RFMgpOVFF4TjFvd0hURWJNQmtHQTFVRUF4TVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUExeldRRHZhK09iZUpYNkY2Y2YxL0NiNzEzenpINE5EeU9YL3AKMVR2enBEWEV0Ni9sVXRGSVJEVE5vakYybG9aMmNZaUoxT1lhZmJwc0NSWS9qN0JxQ1RDL29Od3pIeVhDSnN0OAp0bHBFaGJSL1hnN0YrdzlQOGlmdmJWOVl4eGN1TEorRkF1TkxpZGx5cmt3QWhvUXJDbmxDK3pZemNGZnNXdlNwCm1UMXlsQ2RLeDJJMFoxMm55NVpYWGVvU1BiaFJ5Y3pLbnpvQXJtUEVaV1gwNmlWUnhndGtieE5vU0sxR3pzWkoKT0pOMEptMWtCaEY4Zk0ydUhSZG5sQmVVUVZTdWZQOThOMGEyVjNGc0JaZ3NnWDJFSThhaUY4TFBRZFJmL09KbApZNCtBNStWVlNkaDdLYWhLQ29QckRsV2prN0t0UjVZSlJyZVk4Njk0KzMzVFRQQ09kd0lEQVFBQm8zOHdmVEFPCkJnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0cKQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVWNk5nWkRVRDZuMDEzZnRsa242c05KV0pNaFV3SFFZRApWUjBSQkJZd0ZJSVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUE2CjFmSzdKS0ZIeWVjVy9wNkVpN3daajErM1ppVXN3QXVvUldLbjB6bWZBbThCaVFDZFZ0UWh4bDNtaVFldlJzV0EKV2dLM2lFQW0yL2VROXBBNmVRWEFWcnEyb0kzNGdFQ0NGclBRcHE5eUdGVG1TVDZjZURlNW9nU291TEpaS04xZAp0RHhUMG9zWGN5VGIvSFJjaTlXdTU0QVgwZXByTm1Ld1FVUmZacDhPa1gvTXJRR0x0cG1PQ1d1cW1UNVc0aFNEClFGYm5iak5YeUZmS0FSeFJMdTNzQXRYdWRBU1dJbXF5bnkvTmRXVDhuUDZzVGJUVzVxbVk0TUNJZTZHNUViWUgKVElyRXRodnB0dW5uR0pXZnFnbmhWeWJZZGVBNi9USS9Wd3JEcDVoRkFlNHU5cWk2NjlzZnFyZHhVVjdGZ25zbAo5eEsrL3FtaHNEblNGNW90c01qOAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMXpXUUR2YStPYmVKWDZGNmNmMS9DYjcxM3p6SDRORHlPWC9wMVR2enBEWEV0Ni9sClV0RklSRFROb2pGMmxvWjJjWWlKMU9ZYWZicHNDUlkvajdCcUNUQy9vTnd6SHlYQ0pzdDh0bHBFaGJSL1hnN0YKK3c5UDhpZnZiVjlZeHhjdUxKK0ZBdU5MaWRseXJrd0Fob1FyQ25sQyt6WXpjRmZzV3ZTcG1UMXlsQ2RLeDJJMApaMTJueTVaWFhlb1NQYmhSeWN6S256b0FybVBFWldYMDZpVlJ4Z3RrYnhOb1NLMUd6c1pKT0pOMEptMWtCaEY4CmZNMnVIUmRubEJlVVFWU3VmUDk4TjBhMlYzRnNCWmdzZ1gyRUk4YWlGOExQUWRSZi9PSmxZNCtBNStWVlNkaDcKS2FoS0NvUHJEbFdqazdLdFI1WUpScmVZODY5NCszM1RUUENPZHdJREFRQUJBb0lCQVFEUC9kRmoxTzdXUTE3KwpVTWRSWWVra2x5MXorbjlHOVVvVmJsMmxHMU1HOG54VDl5alFtTG1hU2RvdmxsU0JlQ1VDNXk0bTE5amtpSWFmClphUTZrQXA3SldVZTU1SjAyUDVDbGtuS3g0VVFIL2sxQTF3dW40YnBoOVVyeEltOXFOYVVnL3QrWmdSOGp1NzYKS3pRYXphUDNkR2phOTNCUmRIaFhFN3pTQUlRN1Q5UkRiTmw0UjZOTW9zUkZieWt6L3JPYm01R0kzNEN0cnpvKwpib0Y1L2NSNVVQT1c2SlE3eVhCdy8wdlJ6aVZvU3F1bmlIS1hUaFZsZ3prTTZnRFVxQmRBNGduc0xWSldxVmxqCndsM251QlI3bGhLbW1RTkVVbnA0RmhyeGhCWHNpYXlYR05QNk5VclVRTEMvTkNMc2lZR2Q2cjk3Ym1jaXBaVXUKMDJ2SkE5T1JBb0dCQVBOVXlJb2hpVWNpaUdPS0ZaYW1NT0N6ZDViR2RnSlZYbWVQa1VqNjBnK05Dc1BKYVJZSgpqU3VMY3RlZTZMKzFzbXpka1R5TEloRlZ3amJJOEE3b0ZWRXdSNWdMeXhhcHNRdDVVYmhsL2pHaU96QVJBQk1rCjVUQUoxWXEzWU0zYlN1TWg4dE96cExNQTlVSU5kZlNvM1NsVCsxVmUyQ1QyN3JCYWJ4YTFvcTBwQW9HQkFPSnAKOVdPTnlkSit0b0o3NlltbUFjbDBaVWFscTNNcFZUSUkycyszN0k5bE42Zi81NWJwQ0pjNHRJODc0ZUM1VmYyawo5a2E2SVVuN0ttY0ZabFNqanpCeTFLNXhMSGZZNzBvWmc5SVpDaitTWW1pY1NFVkJrTkE5RjdiWUZHWGp5NklvCkViYUFDMmNNS1g3TjBxNHkvMlUyWUdEMzdFL0Y2V3FCNUs0TURUS2ZBb0dBZTJFTDVlNG5PeWhwVzM5U2Z2WjUKWmhYWmwxdTl6bVVXM3cvT3JPQnd6bTNIZllxTWZCNFB0SHFhbW5YNnNlb2hORTRNTEZTbnkzNWVZWVQxSTduTgp4VUxqcWxhZ2ZUZEJpLzNSejl2M1RaZGl4M1ozUVQyOTcrT3NvUTltU0RyZTk5Zm8xaXNLWWJFa3FuOUV4ZTh4ClpKa3VvUlRjSjdJRlNPb3gxYVAzZmpFQ2dZRUF0MEhXR1hjcEZOUDArMVk2SjJ5VFk3QnZUS2hKUmxQOUhodG0KcDl3UmY5c0lHbFdaNkY3RDBrcFdjdHlnTGRrMURiRFltVlNNSHlwSkhzdVRFUXkxbUJ4Sm9zdjlseCtpUnRLeQpESHF4L2RTSkRHejZYZnY4cjEvVGN1NGdUSHY5VlVtalZKajlJYklKWUJaTjRTdHI1a3NGNVZhbUVjZDU3dmdsCjFPM3lQTGNDZ1lFQXg5MGdNWXpMRW90RnVaaE1pVjZwbEVxUjQ3T1UwbXE4dUZkZlBzc0RZdk00YW9CMG4wWG4KNG1UNkZ5QXlMNTAxb0IyTmUydjZuc01OeGpYZVYxOUJHdnVZcUcyOTJ5bmkxa1RDU0lkY3ZrRitWNlJhVGNhWgpEZkhBQ1ovaDNwd2M5aWpDVHVrd1daajUwQStNaDVZVEFFWStpOE9za2JGY1E4dSs1NzhGNjJzPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRRVFaTmR4Rmx3Wk1ZOWJrM29uVkJpakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalF3TXpBNU1UWTFOREUzV2hjTk1qVXdNekE1TVRZMQpOREUzV2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRFJmRlJWU1UrQWxkTC9EeUtKdFY2clNVMHo3RzBlelpBZUF0U3dXOTZ6eFFjVFBxTDcKV0UxVWQwWUZhSTVmcjI4cEdRdHlJbFh2dWJaNURCQ0xvbFpmUWM0K2E3aXg4MWEzYnNTKyt6MmFDV3p2ZmFiaQpyQ0V0dndUUVlINzdKZURtN240VXo3SEQ3WEQwY2preEpsRkpNSFNFN0dCaEVMTFhHWitrNnpjamtZd0VXUVRxCm1DMTlUY2xKS1VBbFFJZkc4bGt5bEZZbS9tNk4rN1BXQTVoeTJiZzJueldHVFo2U1dPcVRJc3ZhMlhNSW1RdkEKSzEyZXdnam8vcXBUOTU4aHN1ZzA1QjRZbUJHbXJVTjlNL2EzTEVCL0Vpay9QWnVpa2gzZ21ZcHk0QVZYWTN2VwpLdWxYTUFUY0tGNW16S3JqQzloQTNISkJMeTIxeHdHSzRyc3hBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVWNk5nWkRVRDZuMDEzZnRsa242c05KV0pNaFV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFHWkJESmpndHd3dWlVTlE0eHhwWnh0M1FXZFNFS3NFWTl5L3hrWi9yMVhnT1lmckNrQVBJY3p4CisyeDgyQU1uNHBTWnNwUVErVXl1N2tIaS9pUzZ6c0UyclRsaXh3eHNuMEg3M3dadU13VGE4M3BocVdBYTdIcWYKdXFHKzNiNElEUG5RS01HcnVUREVZZWxmTmVLR2FVbFhDUUNUZ1ZHOE93TnJZdlhSeXZjUG5BM2JzTjZTQm1RSAoycEpWVlJTNlI1TlZxTjRORzQwREtHNGhLRWlUZ2NjZGZMWjZXcnRoK3h4VUtqZUNNNXd5Z1FUaWpPTzhzMjJlCjFYRGhzRThsMnFpZzNIVjEyLzhhSTl3NEFpVkhpQ1JzbWFpbTdEMEEzRHc2QWhtRkF6V2k4cm1ET3V6Z2JENlAKZ05mRklxanhIYUlhVFFMVzM4cElvWS95d3ZqY3VYQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "VDV0Rll5bmdTUkhiZERNaA=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "WWJJdzdGOUhyc2NZdlpQbg=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry-htpasswd"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJDZiNXVpUGpmZFMxTWFHOTJDTG5IWGVDZnZ0bEMvamFtMTlhcjFJR05pZklKbVVaZ29ycU1p"
---
# Source: harbor/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registryctl"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-trivy
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9oYXJib3ItcmVkaXM6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
  gitHubToken: ""
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "https://core.harbor.domain"
  CORE_URL: "http://harbor-core:80"
  JOBSERVICE_URL: "http://harbor-jobservice"
  REGISTRY_URL: "http://harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://harbor-redis:6379/2?idle_timeout_seconds=30"  
  PORTAL_URL: "http://harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
  QUOTA_UPDATE_PROVIDER: "db"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice-env"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://harbor-core:80"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  REGISTRY_URL: "http://harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"

  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
---
# Source: harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-registryctl"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
data:
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-trivy"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: c8548a620a464d3c00e1a2e878d013f2f9f974c21f7f8a290777e45f948f2d72
        checksum/secret: 60ef0515ffcac2d34984fc10c597af0839bb0847e350d32feca66f6a96284dca
        checksum/secret-jobservice: 3e3cb5aca58e2012efb341d8e604eb13df4d030b7cc994c1e0680a3fb9307abe
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:v2.10.0
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-core"
        - secretRef:
            name: "harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-jobservice
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-core
      - name: ca-download
        secret:
          secretName: "harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: cc0e1292cee3c8425c958aeee30046a701a7b3e32ce7b5d3751cceebea93e2f3
        checksum/configmap-env: 52de7676d9ac66bda6ec9e57e3274d89d9b22ddea971c927ebb81964b680f5df
        checksum/secret: b137339e7fc48aae262d0c0c4c2b3440b2ec72316afcdc493f12ce648543f9d8
        checksum/secret-core: 045aae22139e8fb17c2e4bfbbf412f11f6b1b49cd999cb94fa88eec7f691a079
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "harbor-jobservice-env"
        - secretRef:
            name: "harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor-jobservice
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: portal
      annotations:
        checksum/configmap: 81e3c496ae5701420a27d38fd5d8a908c1ba48909fbc7d774e6325c925e5b224
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 1dd422c1f80f9b0e00e1a2297e956c1da3fb1d6bc24892179accf38bc1e3be96
        checksum/secret: e1c42a6050ff65992c55045c57bc3ec05c5f595212bf1a84134f148a5b30155d
        checksum/secret-jobservice: 166cf08ab5de9421d424a8d9d022c75f3d926552c39b10404e6f49390088ac28
        checksum/secret-core: b9147c2b870906ac1dd13e3b2342b94cb323d2b0e00f4a09201b10a806e56a72
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-registryctl"
        - secretRef:
            name: "harbor-registry"
        - secretRef:
            name: "harbor-registryctl"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: harbor-registry-htpasswd
          
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-database"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 55b1e7be0855a53d12362dc11834f575bd16ba09cdd84b0551bda85635e15ac1
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
      # as we change the data directory to a sub folder to support psp, the init container here
      # is used to migrate the existing data. See https://github.com/goharbor/harbor-helm/issues/756
      # for more detail.
      # we may remove it after several releases
      - name: "data-migrator"
        image: goharbor/harbor-db:v2.10.0
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
      # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
      # use this init container to correct the permission
      # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
      - name: "data-permissions-ensurer"
        image: goharbor/harbor-db:v2.10.0
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:v2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 1
        envFrom:
          - secretRef:
              name: "harbor-database"
        env:
          # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
          # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
        - name: shm-volume
          mountPath: /dev/shm
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-redis
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-trivy
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: harbor-trivy
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 81105cb33a8cb2937d69d3a39d46a94953951b6154c8518d288852bcf66b4d6d
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.10.0
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_TIMEOUT"
              value: "5m0s"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_OFFLINE_SCAN"
              value: "false"
            - name: "SCANNER_TRIVY_SECURITY_CHECKS"
              value: "vuln"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath: 
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "harbor-ingress"
  labels:
    heritage: Helm
    release: harbor
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - secretName: harbor-ingress
    hosts:
    - core.harbor.domain
  rules:
  - http:
      paths:
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /service/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /v2/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /chartrepo/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /c/
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: harbor-portal
            port:
              number: 80
    host: core.harbor.domain
